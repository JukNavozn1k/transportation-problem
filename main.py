import streamlit as st
import pandas as pd
from typing import List

from solver.transport import vogel_initial_solution, transportation_to_lp, balance_transportation
from solver.dual import dual_simplex


def to_int_if_possible(x: float) -> int | float:
    return int(x) if abs(x - round(x)) < 1e-9 else x


def format_matrix(mat: List[List[float]]) -> List[List[int | float]]:
    return [[to_int_if_possible(v) for v in row] for row in mat]


def main():
    st.set_page_config(page_title="–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞", page_icon="üöö", layout="wide")
    # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    left, center, right = st.columns([1, 2, 1])
    with center:
        st.title("üöö –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞")
        st.caption("–í–≤–æ–¥ –ø–æ —Ü–µ–Ω—Ç—Ä—É. –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç ‚Äî –æ—Ç–¥–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π (—á–∏—Å–ª–æ ‚â• 0).")
        st.subheader("–†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏")
        c1, c2 = st.columns(2)
        with c1:
            m = st.number_input("–ß–∏—Å–ª–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ (m)", min_value=1, max_value=20, value=3, step=1)
        with c2:
            n = st.number_input("–ß–∏—Å–ª–æ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π (n)", min_value=1, max_value=20, value=4, step=1)

        st.subheader("–ú–∞—Ç—Ä–∏—Ü–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–µ–π C (m√ón)")
        allow_float = st.checkbox("–†–∞–∑—Ä–µ—à–∏—Ç—å –¥—Ä–æ–±–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è", value=False)
        # –°–µ—Ç–∫–∞ –ø–æ–ª–µ–π –¥–ª—è –º–∞—Ç—Ä–∏—Ü—ã C
        cost: List[List[float]] = []
        for i in range(m):
            cols = st.columns(n)
            row_vals = []
            for j in range(n):
                key = f"c_{i}_{j}"
                default = [
                    [8, 6, 10, 9],
                    [9, 12, 13, 7],
                    [14, 9, 16, 5],
                ]
                dval = default[i][j] if i < len(default) and j < len(default[0]) else 0.0
                if allow_float:
                    val = cols[j].number_input(
                        label=f"C[{i+1},{j+1}]",
                        min_value=0.0,
                        value=float(dval),
                        step=1.0,
                        key=key,
                        format="%.4f",
                    )
                else:
                    val = cols[j].number_input(
                        label=f"C[{i+1},{j+1}]",
                        min_value=0,
                        value=int(dval),
                        step=1,
                        key=key,
                        format="%d",
                    )
                row_vals.append(float(val))
            cost.append(row_vals)

        st.subheader("–ó–∞–ø–∞—Å—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ (–¥–ª–∏–Ω–∞ m)")
        supply_cols = st.columns(m)
        supply: List[float] = []
        for i in range(m):
            dval = [20, 30, 250][i] if i < 3 else 0.0
            if allow_float:
                v = supply_cols[i].number_input(
                    label=f"S[{i+1}]",
                    min_value=0.0,
                    value=float(dval),
                    step=1.0,
                    key=f"s_{i}",
                    format="%.4f",
                )
            else:
                v = supply_cols[i].number_input(
                    label=f"S[{i+1}]",
                    min_value=0,
                    value=int(dval),
                    step=1,
                    key=f"s_{i}",
                    format="%d",
                )
            supply.append(float(v))

        st.subheader("–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π (–¥–ª–∏–Ω–∞ n)")
        demand_cols = st.columns(n)
        demand: List[float] = []
        for j in range(n):
            dval = [10, 10, 35, 20][j] if j < 4 else 0.0
            if allow_float:
                v = demand_cols[j].number_input(
                    label=f"D[{j+1}]",
                    min_value=0.0,
                    value=float(dval),
                    step=1.0,
                    key=f"d_{j}",
                    format="%.4f",
                )
            else:
                v = demand_cols[j].number_input(
                    label=f"D[{j+1}]",
                    min_value=0,
                    value=int(dval),
                    step=1,
                    key=f"d_{j}",
                    format="%d",
                )
            demand.append(float(v))

        st.divider()
        options_col1, options_col2, options_col3 = st.columns([1, 1, 1])
        with options_col1:
            do_vogel = st.checkbox("–ù–∞—á–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω (–§–æ–≥–µ–ª—å)", value=True)
        with options_col2:
            do_lp = st.checkbox("–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ (—Å–∏–º–ø–ª–µ–∫—Å)", value=True)
        with options_col3:
            run = st.button("–†–µ—à–∏—Ç—å", type="primary")

        obj_col1, obj_col2 = st.columns([1, 2])
        with obj_col1:
            st.write("")
        with obj_col2:
            # objective = st.radio("–¶–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è", ["–ú–∞–∫—Å–∏–º—É–º", "–ú–∏–Ω–∏–º—É–º"], index=0, horizontal=True)
            objective = st.radio("–¶–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è", ["–ú–∏–Ω–∏–º—É–º"], index=0, horizontal=True)

    # –í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ‚Äî —Ç–æ–∂–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É
    if not run:
        return

    with center:
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫—É—Ä–∞—Ç–Ω–æ
        total_supply = sum(supply)
        total_demand = sum(demand)
        st.subheader("–í–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        st.markdown("–ú–∞—Ç—Ä–∏—Ü–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–µ–π C:")
        c_cols = [f"D{j+1}" for j in range(n)]
        c_idx = [f"S{i+1}" for i in range(m)]
        st.dataframe(pd.DataFrame(format_matrix(cost), columns=c_cols, index=c_idx), use_container_width=True)
        c_a, c_b = st.columns(2)
        with c_a:
            st.metric("–°—É–º–º–∞ –∑–∞–ø–∞—Å–æ–≤", to_int_if_possible(total_supply))
        with c_b:
            st.metric("–°—É–º–º–∞ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π", to_int_if_possible(total_demand))

        if do_vogel:
            st.subheader("–ù–∞—á–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω (–º–µ—Ç–æ–¥ –§–æ–≥–µ–ª—è)")
            try:
                # –ë–∞–ª–∞–Ω—Å–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ–º –ø–ª–∞–Ω–∞
                supply_v, demand_v, cost_v = balance_transportation(supply[:], demand[:], cost)
                m_v, n_v = len(supply_v), len(demand_v)
                init_plan = vogel_initial_solution(supply_v[:], demand_v[:], cost_v)
                st.caption("(–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏/—Å—Ç–æ–ª–±—Ü—ã —Å –Ω—É–ª–µ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é)")
                cols_v = [f"D{j+1}" + (" (—Ñ–∏–∫—Ç.)" if j >= n else "") for j in range(n_v)]
                idx_v = [f"S{i+1}" + (" (—Ñ–∏–∫—Ç.)" if i >= m else "") for i in range(m_v)]
                st.dataframe(pd.DataFrame(format_matrix(init_plan), columns=cols_v, index=idx_v), use_container_width=True)
                init_cost = sum(init_plan[i][j] * cost_v[i][j] for i in range(m_v) for j in range(n_v))
                st.metric("–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞", to_int_if_possible(init_cost))
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞: {e}")

        if do_lp:
            st.subheader("–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ (—Å–∏–º–ø–ª–µ–∫—Å)")
            try:
                c, A, b, senses, supply_b, demand_b, cost_b = transportation_to_lp(supply, demand, cost)
                m_b, n_b = len(supply_b), len(demand_b)
                # –ó–Ω–∞–∫ —Ü–µ–ª–∏: –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –º–∞–∫—Å–∏–º—É–º (–ø–µ—Ä–µ–¥–∞—ë–º c), –¥–ª—è –º–∏–Ω–∏–º—É–º–∞ ‚Äî –¥–æ–º–Ω–æ–∂–∞–µ–º –Ω–∞ -1
                if objective == "–ú–∏–Ω–∏–º—É–º":
                    c_input = [-v for v in c]
                else:
                    c_input = c
                res = dual_simplex(c_input, A, b, senses)
                if res.status != "optimal":
                    st.warning(f"–°—Ç–∞—Ç—É—Å —Ä–µ—à–µ–Ω–∏—è: {res.status}")
                else:
                    st.success("–ù–∞–π–¥–µ–Ω–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ")

                st.caption("(–†–µ—à–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –Ω–∞ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)")
                st.subheader("–¶–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è")
                # –û–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏ —Ü–µ–ª–∏
                if objective == "–ú–∞–∫—Å–∏–º—É–º":
                    st.latex(r"Z = \sum_{i=1}^{m} \sum_{j=1}^{n} c_{ij} \, x_{ij} \;\to\; \max")
                else:
                    st.latex(r"Z = \sum_{i=1}^{m} \sum_{j=1}^{n} c_{ij} \, x_{ij} \;\to\; \min")
                    st.caption("–î–ª—è —Ä–µ—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–∏–º–ø–ª–µ–∫—Å –º—ã –¥–æ–º–Ω–æ–∂–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Ü–µ–ª–∏ –Ω–∞ ‚àí1: c' = ‚àíc.")
                st.markdown("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: ")
                st.latex(r"\sum_{j=1}^{n} x_{ij} = \text{supply}_i,\quad i=1..m;\quad \sum_{i=1}^{m} x_{ij} = \text{demand}_j,\quad j=1..n;\quad x_{ij} \ge 0.")

                st.markdown("–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏:")
                if res.objective is None:
                    display_obj = float('nan')
                else:
                    display_obj = res.objective if objective == "–ú–∞–∫—Å–∏–º—É–º" else -res.objective
                st.metric("Z*", to_int_if_possible(display_obj))

                if res.x:
                    xmat = [res.x[i * n_b:(i + 1) * n_b] for i in range(m_b)]
                    st.markdown("–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω (–º–∞—Ç—Ä–∏—Ü–∞ x):")
                    cols_b = [f"D{j+1}" + (" (—Ñ–∏–∫—Ç.)" if j >= n else "") for j in range(n_b)]
                    idx_b = [f"S{i+1}" + (" (—Ñ–∏–∫—Ç.)" if i >= m else "") for i in range(m_b)]
                    st.dataframe(pd.DataFrame(format_matrix(xmat), columns=cols_b, index=idx_b), use_container_width=True)
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ —Å–∏–º–ø–ª–µ–∫—Å-—Ä–µ—à–µ–Ω–∏—è: {e}")


if __name__ == "__main__":
    main()

