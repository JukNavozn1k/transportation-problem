import streamlit as st
import pandas as pd
from typing import List
import math

from solver.transport_potential import (
    balance_transportation,
    vogel_initial_solution_with_steps,
    improve_plan_with_steps,
)


def to_int_if_possible(x) -> int | float | str:
    """–ü—ã—Ç–∞–µ—Ç—Å—è –∫—Ä–∞—Å–∏–≤–æ –ø—Ä–∏–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –∫ —Ü–µ–ª–æ–º—É, –Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è NaN/inf/–Ω–µ—á–∏—Å–ª–æ–≤—ã—Ö."""
    try:
        xf = float(x)
    except Exception:
        return x
    if not math.isfinite(xf):
        return x
    if abs(xf - round(xf)) < 1e-9:
        return int(round(xf))
    return xf


def format_matrix(mat: List[List[float]]) -> List[List[int | float]]:
    return [[to_int_if_possible(v) for v in row] for row in mat]


def main():
    st.set_page_config(page_title="–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞", page_icon="üöö", layout="wide")
    # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    left, center, right = st.columns([1, 2, 1])
    with center:
        st.title("üöö –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞")
        # st.caption("–í–≤–æ–¥ –ø–æ —Ü–µ–Ω—Ç—Ä—É. –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç ‚Äî –æ—Ç–¥–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π (—á–∏—Å–ª–æ ‚â• 0).")
        st.subheader("–†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏")
        c1, c2 = st.columns(2)
        with c1:
            m = st.number_input("–ß–∏—Å–ª–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ (m)", min_value=1, max_value=20, value=3, step=1)
        with c2:
            n = st.number_input("–ß–∏—Å–ª–æ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π (n)", min_value=1, max_value=20, value=4, step=1)

        st.subheader("–ú–∞—Ç—Ä–∏—Ü–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–µ–π C (m√ón)")
        allow_float = st.checkbox("–†–∞–∑—Ä–µ—à–∏—Ç—å –¥—Ä–æ–±–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è", value=False)
        # –°–µ—Ç–∫–∞ –ø–æ–ª–µ–π –¥–ª—è –º–∞—Ç—Ä–∏—Ü—ã C
        cost: List[List[float]] = []
        for i in range(m):
            cols = st.columns(n)
            row_vals = []
            for j in range(n):
                key = f"c_{i}_{j}"
                default = [
                    [8, 6, 10, 9],
                    [9, 12, 13, 7],
                    [14, 9, 16, 5],
                ]
                dval = default[i][j] if i < len(default) and j < len(default[0]) else 0.0
                if allow_float:
                    val = cols[j].number_input(
                        label=f"C[{i+1},{j+1}]",
                        min_value=0.0,
                        value=float(dval),
                        step=1.0,
                        key=key,
                        format="%.4f",
                    )
                else:
                    val = cols[j].number_input(
                        label=f"C[{i+1},{j+1}]",
                        min_value=0,
                        value=int(dval),
                        step=1,
                        key=key,
                        format="%d",
                    )
                row_vals.append(float(val))
            cost.append(row_vals)

        st.subheader("–ó–∞–ø–∞—Å—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ (–¥–ª–∏–Ω–∞ m)")
        supply_cols = st.columns(m)
        supply: List[float] = []
        for i in range(m):
            dval = [20, 30, 250][i] if i < 3 else 0.0
            if allow_float:
                v = supply_cols[i].number_input(
                    label=f"S[{i+1}]",
                    min_value=0.0,
                    value=float(dval),
                    step=1.0,
                    key=f"s_{i}",
                    format="%.4f",
                )
            else:
                v = supply_cols[i].number_input(
                    label=f"S[{i+1}]",
                    min_value=0,
                    value=int(dval),
                    step=1,
                    key=f"s_{i}",
                    format="%d",
                )
            supply.append(float(v))

        st.subheader("–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π (–¥–ª–∏–Ω–∞ n)")
        demand_cols = st.columns(n)
        demand: List[float] = []
        for j in range(n):
            dval = [10, 10, 35, 20][j] if j < 4 else 0.0
            if allow_float:
                v = demand_cols[j].number_input(
                    label=f"D[{j+1}]",
                    min_value=0.0,
                    value=float(dval),
                    step=1.0,
                    key=f"d_{j}",
                    format="%.4f",
                )
            else:
                v = demand_cols[j].number_input(
                    label=f"D[{j+1}]",
                    min_value=0,
                    value=int(dval),
                    step=1,
                    key=f"d_{j}",
                    format="%d",
                )
            demand.append(float(v))

        st.divider()
        ctrl_l, ctrl_c, ctrl_r = st.columns([1, 1, 1])
        with ctrl_l:
            objective = st.radio("–¶–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è", ["–ú–∞–∫—Å–∏–º—É–º", "–ú–∏–Ω–∏–º—É–º"], index=0, horizontal=True)
        with ctrl_c:
            st.write("")
        with ctrl_r:
            run = st.button("–†–µ—à–∏—Ç—å", type="primary")

    # –í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ‚Äî —Ç–æ–∂–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É
    if not run:
        return

    with center:
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫—É—Ä–∞—Ç–Ω–æ
        total_supply = sum(supply)
        total_demand = sum(demand)
        st.subheader("–í–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        st.markdown("–ú–∞—Ç—Ä–∏—Ü–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–µ–π C:")
        c_cols = [f"D{j+1} ({to_int_if_possible(demand[j])})" for j in range(n)]
        c_idx = [f"S{i+1} ({to_int_if_possible(supply[i])})" for i in range(m)]
        st.dataframe(pd.DataFrame(format_matrix(cost), columns=c_cols, index=c_idx), use_container_width=True)
        c_a, c_b = st.columns(2)
        with c_a:
            st.metric("–°—É–º–º–∞ –∑–∞–ø–∞—Å–æ–≤", to_int_if_possible(total_supply))
        with c_b:
            st.metric("–°—É–º–º–∞ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π", to_int_if_possible(total_demand))

        # –ü–æ–∫–∞–∑–∞—Ç—å —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å —Ñ–∏–∫—Ç–∏–≤–Ω—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
        if abs(total_supply - total_demand) > 1e-9:
            st.markdown("–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ (—Å —É—á—ë—Ç–æ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞/–ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è):")
            supply_b2, demand_b2, cost_b2 = balance_transportation(supply, demand, cost)
            m_b2, n_b2 = len(supply_b2), len(demand_b2)
            cols_b2 = [
                f"D{j+1} ({to_int_if_possible(demand_b2[j])})" + (" (—Ñ–∏–∫—Ç.)" if j >= n else "")
                for j in range(n_b2)
            ]
            idx_b2 = [
                f"S{i+1} ({to_int_if_possible(supply_b2[i])})" + (" (—Ñ–∏–∫—Ç.)" if i >= m else "")
                for i in range(m_b2)
            ]
            st.dataframe(pd.DataFrame(format_matrix(cost_b2), columns=cols_b2, index=idx_b2), use_container_width=True)

        # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–≤ —Å –ø–æ—ç—Ç–∞–ø–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
        st.subheader("–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ (–º–µ—Ç–æ–¥ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–≤)")
        try:
            # –î–ª—è –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏ –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–Ω–∞–∫ —Å—Ç–æ–∏–º–æ—Å—Ç–µ–π
            if objective == "–ú–∞–∫—Å–∏–º—É–º":
                cost_eff = [[-c for c in row] for row in cost]
            else:
                cost_eff = [row[:] for row in cost]

            # –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ (—Ä–∞–±–æ—á–∞—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏)
            supply_b, demand_b, cost_b = balance_transportation(supply, demand, cost_eff)
            # –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ (–¥–ª—è –ø–æ–∫–∞–∑–∞ –∏—Å—Ö–æ–¥–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ —Ä–∞–∑–ª–æ–∂–µ–Ω–∏–∏ —Ü–µ–ª–∏)
            supply_disp, demand_disp, cost_disp = balance_transportation(supply, demand, cost)
            m_b, n_b = len(supply_b), len(demand_b)

            # 1) –§–æ–≥–µ–ª—å ‚Äî —à–∞–≥–∏
            init_alloc, vogel_steps = vogel_initial_solution_with_steps(supply_b, demand_b, cost_b)
            with st.expander("–ú–µ—Ç–æ–¥ –§–æ–≥–µ–ª—è ‚Äî –ø–æ—ç—Ç–∞–ø–Ω–æ", expanded=False):
                # –î–µ—Ä–∂–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –î–û —à–∞–≥–∞, —á—Ç–æ–±—ã –ø–æ—è—Å–Ω—è—Ç—å –≤—ã–±–æ—Ä –Ω–∞ —Ç–µ–∫—É—â–µ–º —à–∞–≥–µ
                pre_supply = supply_b[:]
                pre_demand = demand_b[:]
                for k, step in enumerate(vogel_steps, start=1):
                    chosen = step["chosen"]
                    # –ü–æ—è—Å–Ω–µ–Ω–∏–µ —à–∞–≥–∞ –≤—ã–±–æ—Ä–∞
                    st.markdown(
                        f"–®–∞–≥ {k}: –≤—ã–±—Ä–∞–Ω –∫—Ä–∏—Ç–µ—Ä–∏–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —à—Ç—Ä–∞—Ñ–∞ ‚Äî {'—Å—Ç—Ä–æ–∫–∞' if chosen['type']=='row' else '—Å—Ç–æ–ª–±–µ—Ü'} {chosen['index']+1}. –í –≤—ã–±—Ä–∞–Ω–Ω–æ–π {'—Å—Ç—Ä–æ–∫–µ' if chosen['type']=='row' else '—Å—Ç–æ–ª–±—Ü–µ'} –±–µ—Ä—ë–º —è—á–µ–π–∫—É —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é: S{chosen['cell'][0]+1}-D{chosen['cell'][1]+1}. –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ = {to_int_if_possible(chosen['qty'])}. –®—Ç—Ä–∞—Ñ = {to_int_if_possible(chosen['penalty'])}."
                    )
                    # –®—Ç—Ä–∞—Ñ—ã –ø–æ —Å—Ç—Ä–æ–∫–∞–º –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã (–¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫)
                    row_pen_map = {i: p for p, i in step.get('row_penalties', [])}
                    row_pen_df = pd.DataFrame({
                        '–®—Ç—Ä–∞—Ñ': [to_int_if_possible(row_pen_map.get(i, float('nan'))) for i in range(len(supply_b))]
                    }, index=[f"S{i+1}" for i in range(len(supply_b))])
                    st.caption("–®—Ç—Ä–∞—Ñ—ã –ø–æ —Å—Ç—Ä–æ–∫–∞–º (—Ä–∞–∑–Ω–æ—Å—Ç—å –¥–≤—É—Ö –Ω–∞–∏–º–µ–Ω—å—à–∏—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–æ–∏–º–æ—Å—Ç–µ–π –≤ —Å—Ç—Ä–æ–∫–µ):")
                    st.dataframe(row_pen_df, use_container_width=True)
                    # –®—Ç—Ä–∞—Ñ—ã –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã (–¥–ª—è –≤—Å–µ—Ö —Å—Ç–æ–ª–±—Ü–æ–≤)
                    col_pen_map = {j: p for p, j in step.get('col_penalties', [])}
                    col_pen_df = pd.DataFrame([
                        [to_int_if_possible(col_pen_map.get(j, float('nan'))) for j in range(len(demand_b))]
                    ], columns=[f"D{j+1}" for j in range(len(demand_b))])
                    st.caption("–®—Ç—Ä–∞—Ñ—ã –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º (—Ä–∞–∑–Ω–æ—Å—Ç—å –¥–≤—É—Ö –Ω–∞–∏–º–µ–Ω—å—à–∏—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–æ–∏–º–æ—Å—Ç–µ–π –≤ —Å—Ç–æ–ª–±—Ü–µ):")
                    st.dataframe(col_pen_df, use_container_width=True)
                    # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞: –≥–¥–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —à—Ç—Ä–∞—Ñ –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ
                    max_row = max(step.get('row_penalties', []), default=(float('-inf'), None))
                    max_col = max(step.get('col_penalties', []), default=(float('-inf'), None))
                    best_side = 'row' if (max_row[0] if max_row[1] is not None else float('-inf')) >= (max_col[0] if max_col[1] is not None else float('-inf')) else 'col'
                    best_val = max(max_row[0] if max_row[1] is not None else float('-inf'), max_col[0] if max_col[1] is not None else float('-inf'))
                    if best_side == 'row' and max_row[1] is not None:
                        st.info(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —à—Ç—Ä–∞—Ñ = {to_int_if_possible(best_val)} –≤ —Å—Ç—Ä–æ–∫–µ S{max_row[1]+1} ‚Äî –≤—ã–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É.")
                    elif best_side == 'col' and max_col[1] is not None:
                        st.info(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —à—Ç—Ä–∞—Ñ = {to_int_if_possible(best_val)} –≤ —Å—Ç–æ–ª–±—Ü–µ D{max_col[1]+1} ‚Äî –≤—ã–±–∏—Ä–∞–µ–º —Å—Ç–æ–ª–±–µ—Ü.")

                    # –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ/—Å—Ç–æ–ª–±—Ü–µ –î–û —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —à–∞–≥–∞ –∏ –ø–æ—è—Å–Ω–∏—Ç—å –≤—ã–±–æ—Ä –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π
                    if chosen['type'] == 'row':
                        i = chosen['index']
                        avail = [(j, cost_b[i][j]) for j in range(n_b) if pre_demand[j] > 0]
                        if avail:
                            j_min, c_min = min(avail, key=lambda t: t[1])
                            avail_df = pd.DataFrame([[to_int_if_possible(cost) for _, cost in avail]], columns=[f"D{j+1}" for j, _ in avail], index=[f"S{i+1}"])
                            st.caption("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ (–¥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞):")
                            st.dataframe(avail_df, use_container_width=True)
                            st.markdown(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Å—Ç—Ä–æ–∫–µ S{i+1}: —è—á–µ–π–∫–∞ D{j_min+1} —Å–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é {to_int_if_possible(c_min)} ‚Äî –µ—ë –∏ –≤—ã–±–∏—Ä–∞–µ–º.")
                    else:
                        j = chosen['index']
                        avail = [(i, cost_b[i][j]) for i in range(m_b) if pre_supply[i] > 0]
                        if avail:
                            i_min, c_min = min(avail, key=lambda t: t[1])
                            avail_df = pd.DataFrame({f"D{j+1}": [to_int_if_possible(cost) for _, cost in avail]}, index=[f"S{i+1}" for i, _ in avail])
                            st.caption("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å—Ç–æ–ª–±—Ü–µ (–¥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞):")
                            st.dataframe(avail_df, use_container_width=True)
                            st.markdown(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Å—Ç–æ–ª–±—Ü–µ D{j+1}: —è—á–µ–π–∫–∞ S{i_min+1} —Å–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é {to_int_if_possible(c_min)} ‚Äî –µ—ë –∏ –≤—ã–±–∏—Ä–∞–µ–º.")

                    # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –≤—ã–±–æ—Ä–∞
                    st.caption("–ê–ª–≥–æ—Ä–∏—Ç–º –§–æ–≥–µ–ª—è: –≤—ã–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É/—Å—Ç–æ–ª–±–µ—Ü —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —à—Ç—Ä–∞—Ñ–æ–º, –∑–∞—Ç–µ–º –≤ –Ω—ë–º ‚Äî —è—á–µ–π–∫—É —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é —Å—Ä–µ–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö.")
                    c_cols2 = [f"D{j+1} ({to_int_if_possible(demand_b[j])})" for j in range(n_b)]
                    c_idx2 = [f"S{i+1} ({to_int_if_possible(supply_b[i])})" for i in range(m_b)]
                    st.dataframe(pd.DataFrame(format_matrix(step['alloc']), columns=c_cols2, index=c_idx2), use_container_width=True)
                    st.caption(
                        f"–¢–µ–∫—É—â–∏–µ –∑–∞–ø–∞—Å—ã: {list(map(to_int_if_possible, step['supply']))}; –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏: {list(map(to_int_if_possible, step['demand']))}"
                    )

                    # –û–±–Ω–æ–≤–ª—è–µ–º pre_* –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
                    qty = chosen['qty']
                    if chosen['type'] == 'row':
                        i = chosen['index']
                        j = chosen['cell'][1]
                    else:
                        j = chosen['index']
                        i = chosen['cell'][0]
                    pre_supply[i] = max(0.0, pre_supply[i] - qty)
                    pre_demand[j] = max(0.0, pre_demand[j] - qty)

            # 2) –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—ã ‚Äî —à–∞–≥–∏
            final_alloc, pot_steps = improve_plan_with_steps(init_alloc, cost_b)
            with st.expander("–ú–µ—Ç–æ–¥ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–≤ ‚Äî –ø–æ—ç—Ç–∞–ø–Ω–æ", expanded=True):
                for t, pstep in enumerate(pot_steps, start=1):
                    st.markdown(f"–ò—Ç–µ—Ä–∞—Ü–∏—è {t}")
                    st.markdown(
                        f"u: {list(map(to_int_if_possible, pstep.get('u', [])))}; v: {list(map(to_int_if_possible, pstep.get('v', [])))}"
                    )
                    if 'deltas' in pstep:
                        st.markdown("–ú–∞—Ç—Ä–∏—Ü–∞ –æ—Ü–µ–Ω–æ–∫ Œî = c - (u+v):")
                        st.dataframe(pd.DataFrame(format_matrix(pstep['deltas'])), use_container_width=True)
                    ent = pstep.get('entering')
                    if ent is None:
                        st.success("–û–ø—Ç–∏–º–∞–ª—å–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ (–≤—Å–µ Œî ‚â• 0)")
                    else:
                        cell = ent['cell']
                        st.markdown(f"–í—Ö–æ–¥—è—â–∞—è —è—á–µ–π–∫–∞: S{cell[0]+1}-D{cell[1]+1}, Œî = {to_int_if_possible(ent['delta'])}")
                        if pstep.get('cycle'):
                            st.markdown(f"–¶–∏–∫–ª: {[(i+1, j+1) for i,j in pstep['cycle']]}")
                            st.markdown(
                                f"–ü–ª—é—Å: {[(i+1, j+1) for i,j in pstep.get('plus', [])]} | –ú–∏–Ω—É—Å: {[(i+1, j+1) for i,j in pstep.get('minus', [])]}"
                            )
                            if 'theta' in pstep:
                                st.markdown(f"Œò = {to_int_if_possible(pstep['theta'])}")
                        c_cols3 = [f"D{j+1} ({to_int_if_possible(demand_b[j])})" for j in range(n_b)]
                        c_idx3 = [f"S{i+1} ({to_int_if_possible(supply_b[i])})" for i in range(m_b)]
                        st.dataframe(pd.DataFrame(format_matrix(pstep['alloc']), columns=c_cols3, index=c_idx3), use_container_width=True)

            # 3) –ò—Ç–æ–≥–æ–≤—ã–π –ø–ª–∞–Ω –∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–ª–∏
            st.subheader("–ò—Ç–æ–≥–æ–≤—ã–π –ø–ª–∞–Ω")
            cols_b = [
                f"D{j+1} ({to_int_if_possible(demand_b[j])})" + (" (—Ñ–∏–∫—Ç.)" if j >= n else "")
                for j in range(n_b)
            ]
            idx_b = [
                f"S{i+1} ({to_int_if_possible(supply_b[i])})" + (" (—Ñ–∏–∫—Ç.)" if i >= m else "")
                for i in range(m_b)
            ]
            st.dataframe(pd.DataFrame(format_matrix(final_alloc), columns=cols_b, index=idx_b), use_container_width=True)

            value_eff = sum(final_alloc[i][j] * cost_b[i][j] for i in range(m_b) for j in range(n_b))
            if objective == "–ú–∞–∫—Å–∏–º—É–º":
                st.metric("Z*", to_int_if_possible(-value_eff))
            else:
                st.metric("Z*", to_int_if_possible(value_eff))

            # –†–∞–∑–ª–æ–∂–µ–Ω–∏–µ —Ü–µ–ª–∏: Z = sum c_ij * x_ij –Ω–∞ –ò–°–•–û–î–ù–û–ô –º–∞—Ç—Ä–∏—Ü–µ —Å—Ç–æ–∏–º–æ—Å—Ç–µ–π (–±–µ–∑ –∑–Ω–∞–∫–∞)
            try:
                terms_symbolic = []
                terms_numeric = []
                for i in range(m_b):
                    for j in range(n_b):
                        xij = final_alloc[i][j]
                        if abs(xij) > 1e-12:
                            cij = cost_disp[i][j]
                            cij_disp = to_int_if_possible(cij)
                            xij_disp = to_int_if_possible(xij)
                            terms_symbolic.append(fr"{cij_disp}\,x_{{S{i+1},D{j+1}}}")
                            terms_numeric.append(fr"{cij_disp}\cdot {xij_disp}")
                if terms_symbolic:
                    st.markdown("–†–∞–∑–ª–æ–∂–µ–Ω–∏–µ —Ü–µ–ª–∏ Z –≤ –≤–∏–¥–µ —Å—É–º–º—ã –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ –æ–±—ä—ë–º–∞ –ø–æ—Å—Ç–∞–≤–∫–∏:")
                    st.latex("Z = " + " + ".join(terms_symbolic))
                    total_original = sum(final_alloc[i][j] * cost_disp[i][j] for i in range(m_b) for j in range(n_b))
                    st.latex("Z = " + " + ".join(terms_numeric) + f" = {to_int_if_possible(total_original)}")
                    if objective == "–ú–∞–∫—Å–∏–º—É–º":
                        st.caption("–¢–∞–∫ –∫–∞–∫ –∑–∞–¥–∞—á–∞ –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏ –±—ã–ª–∞ —Å–≤–µ–¥–µ–Ω–∞ –∫ –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ -C, –∑–¥–µ—Å—å Z –≤—ã—á–∏—Å–ª–µ–Ω –ø–æ –∏—Å—Ö–æ–¥–Ω—ã–º C.")
            except Exception:
                pass

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –º–µ—Ç–æ–¥–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–≤: {e}")


if __name__ == "__main__":
    main()

